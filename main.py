import os
import hashlib
import tkinter as tk
from tkinter import filedialog, ttk
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import csv

# Define the path to the directory or file you want to scan
target_path = ""

# Function to load malware signatures from a CSV file
def load_malware_signatures(signature_file):
    signatures = set()
    with open(signature_file, 'r', newline='') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            signatures.add(row[0])  # Assuming the signature is in the first column
    return signatures

# Load malware signatures from the CSV file
malware_signatures = load_malware_signatures('malware_signatures.csv')  # Replace with your NSRL dataset file

# Function to scan a file for malware
def scan_file(file_path):
    try:
        with open(file_path, "rb") as file:
            file_content = file.read()
            file_hash = hashlib.md5(file_content).hexdigest()

            if file_hash in malware_signatures:
                return file_path, "Malware detected"
    except Exception as e:
        return file_path, f"Error scanning: {str(e)}"

    return None

def scan_directory_recursive(directory_path):
    malware_detected = []

    for root, dirs, files in os.walk(directory_path):
        for file in files:
            file_path = os.path.join(root, file)
            result = scan_file(file_path)
            if result:
                malware_detected.append(result)

    return malware_detected

def start_real_time_monitoring(path_to_monitor):
    observer = Observer()
    event_handler = MalwareScanHandler()
    observer.schedule(event_handler, path=path_to_monitor, recursive=True)
    observer.start()

    try:
        while True:
            time.sleep(5)  # Sleep for a while to keep the observer running
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

class MalwareScanHandler(FileSystemEventHandler):
    def on_modified(self, event):
        file_path = event.src_path
        result = scan_file(file_path)
        if result:
            print("Malware detected:", file_path)
            update_scan_result_table(result)

def start_real_time_monitoring_button_click():
    path_to_monitor = file_entry.get()
    start_real_time_monitoring(path_to_monitor)

def scan_button_click():
    path_to_scan = file_entry.get()
    malware_detected = scan_directory_recursive(path_to_scan)

    if malware_detected:
        for result in malware_detected:
            update_scan_result_table(result)
    else:
        update_scan_result_table(("No malware detected", ""))

def browse_button_click():
    target_path = filedialog.askopenfilename()
    file_entry.delete(0, tk.END)
    file_entry.insert(0, target_path)

# Function to update the scan result table
def update_scan_result_table(result):
    tree.insert('', 'end', values=result)

# Create the main window
root = tk.Tk()
root.title("Malware Scanner")

# Create a frame for the buttons and result table
frame = ttk.Frame(root)
frame.pack(padx=10, pady=10, fill='both', expand=True)

# Create UI components
file_label = tk.Label(frame, text="File or Directory:")
file_entry = tk.Entry(frame)
browse_button = tk.Button(frame, text="Browse", command=browse_button_click)
scan_button = tk.Button(frame, text="Scan", command=scan_button_click)
monitor_button = tk.Button(frame, text="Start Real-Time Monitoring", command=start_real_time_monitoring_button_click)

# Arrange UI components
file_label.grid(row=0, column=0, padx=5, pady=5)
file_entry.grid(row=0, column=1, columnspan=2, padx=5, pady=5, sticky='ew')
browse_button.grid(row=0, column=3, padx=5, pady=5)
scan_button.grid(row=0, column=4, padx=5, pady=5)
monitor_button.grid(row=0, column=5, padx=5, pady=5)

# Create a result table
tree = ttk.Treeview(frame, columns=("File", "Result"))
tree.heading("#1", text="File")
tree.heading("#2", text="Result")
tree.column("#1", width=300)
tree.column("#2", width=100)
tree.grid(row=1, column=0, columnspan=6, padx=5, pady=5)

# Create scrollbars for the result table
vsb = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
vsb.grid(row=1, column=6, sticky='ns')
tree.configure(yscrollcommand=vsb.set)

# Start the main event loop
root.mainloop()
